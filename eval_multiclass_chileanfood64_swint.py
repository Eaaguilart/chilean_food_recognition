import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf

sns.set(style='darkgrid', palette='cubehelix')

from tensorflow.keras.models import Sequential
from keras_preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras import regularizers, optimizers
from tensorflow.python.client import device_lib
from scheduler import *
from swintransformer import SwinTransformer

root = "/home/eduardo-ucn/Documents/datasets/ChileanFood64/"

test_df  = pd.read_csv(root+"testLabels.csv",dtype=str)

valid_datagen = ImageDataGenerator(rescale=1./255)

batch_size = 16
IMG_SIZE = 224
CROP_SIZE = 224

test_generator=valid_datagen.flow_from_dataframe(dataframe=test_df,
                                                directory=root,
                                                x_col="path",
                                                y_col="label",
                                                batch_size=1,
                                                seed=42,
                                                shuffle=False,
                                                class_mode="categorical",
                                                validate_filenames=False,
                                                target_size= (CROP_SIZE,CROP_SIZE))    


def center_crop(x, center_crop_size, **kwargs):
    centerw, centerh = x.shape[0]//2, x.shape[1]//2
    halfw, halfh = center_crop_size[0]//2, center_crop_size[1]//2
    return x[centerw-halfw:centerw+halfw,centerh-halfh:centerh+halfh, :] 

def center_crop_generator(batches, crop_length):
    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(batches)
        batch_crops = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))
        for i in range(batch_x.shape[0]):
            batch_crops[i] = center_crop(batch_x[i], (crop_length,crop_length))
        yield (batch_crops, batch_y)



test_crops = center_crop_generator(test_generator, CROP_SIZE)

STEP_SIZE_TEST = test_generator.n//test_generator.batch_size

NUM_CLASSES = 64

model = tf.keras.Sequential([
  tf.keras.layers.Input(shape=(CROP_SIZE,CROP_SIZE ,3)),
  SwinTransformer('swin_tiny_224', include_top=False, pretrained=True),
  tf.keras.layers.Dense(NUM_CLASSES, activation='softmax')
])


learning_rate       =  0.0002
epochs              =  40

model.compile(loss="categorical_crossentropy",
              optimizer=optimizers.Adam(lr=learning_rate), 
              metrics=["accuracy", tf.keras.metrics.TopKCategoricalAccuracy(k=5)], run_eagerly=True)

model.load_weights("chileanfood64_swint_tiny_bs16.h5")
model.trainable=False
model.summary()
model.evaluate(test_crops, batch_size=test_generator.batch_size, steps=STEP_SIZE_TEST)
